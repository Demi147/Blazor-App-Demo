@page "/Data/User"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using BlazorDemoUI.Models


@inject IUserData _db

<h3>User Page</h3>

<h4> Insert new user </h4>
<EditForm Model="@newUser" OnValidSubmit="@InsertUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @*<InputText id="userName" @bind-Value="newUser.UserName" />*@
    <InputText id="userEmail" @bind-Value="newUser.UserEmail" />
    @*<InputText id="userPassword" @bind-Value="newUser.UserPassword" />*@

    <button type="submit" class="btn btn-primary">Submit</button>>
</EditForm>

<h4>Search user</h4>
<EditForm Model="@newUser">
    @*<DataAnnotationsValidator />*@
    <ValidationSummary />

    <InputText id="userEmail" @bind-Value="newUser.UserEmail" />

    <button type="reset" class="btn btn-primary" @onclick="@SearchUser">Search</button>
</EditForm>




<h4> Remove user </h4>
<button type="reset" class="btn btn-primary" @onclick="@RemoveUser">Remove</button>

<h4>Current user</h4>
@if (_user is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>User name</th>
                <th>User ID</th>
                <th>User email</th>
                <th>User Password</th>
                <th>Is admin</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _user)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.UserID</td>
                    <td>@user.UserEmail</td>
                    <td>@user.UserPassword</td>
                    <td>@user.IsAdmin</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Users> _user;
    private DisplayUserModel newUser = new DisplayUserModel();

    protected override async Task OnInitializedAsync()//Working search all user function
    {
        _user = await _db.GetAllUsers();
    }

    private async Task SearchUser()//Working searc user accordign to user email(input line 25-32)
    {
        try
        {
            string stest = newUser.UserEmail.ToString();
            _user = await _db.GetUser_Email(stest);
        }
        catch (Exception ex)
        {
            string stest = ex.ToString();
        }
    }

    private async Task InsertUser()
    {
        try
        {
            Users u = new Users
            {
                UserID = 2,
                UserName = newUser.UserName,
                UserEmail = newUser.UserEmail,
                UserPassword = newUser.UserPassword,
                IsAdmin = false
            };
            await _db.InsertUser(u);

            _user.Add(u);//or _user = await _db.GetUsers();

            newUser = new DisplayUserModel();
        }
        catch (Exception ex)
        {
            string stest = ex.ToString();
        }

    }

    private async Task RemoveUser()
    {
        try
        {
            Users u = new Users
            {
                UserID = 2,
                UserName = newUser.UserName,
                UserEmail = newUser.UserEmail,
                UserPassword = newUser.UserPassword,
                IsAdmin = false
            };
            await _db.RemoveUser(u);

            _user.Remove(u);

            newUser = new DisplayUserModel();
        }
        catch (Exception ex)
        {
            string stest = ex.ToString();
        }
    }
}
