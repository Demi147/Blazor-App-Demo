@page "/UserInfoPage"
@attribute [Authorize]

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using BlazorDemoUI.Models
@using Services;

@inject AuthenticationStateProvider authenticationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUserData userdata
@inject NavigationManager navManager


<h2>
    User info
</h2>
<br />
<br />
@if (edit)
{
    <span>yeeeeeeeeeeeeeeeeeeee</span>
    <EditForm Model="@_user" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <br />
        <InputText id="userName" @bind-Value="_user.UserName" placeholder="UserName" />
        <ValidationMessage For="@(() => _user.UserName)" />
        <br />
        <InputText id="userEmail" @bind-Value="_user.UserEmail" placeholder="Email Adress" />
        <ValidationMessage For="@(() => _user.UserEmail)" />
        <br />
        <button type="submit" class="btn btn-primary">Save</button>

    </EditForm>
    <button @onclick="@toggleEdit" class="btn btn-primary">Cancel</button>
    <br />

}
else
{
    @_user.UserName
    @_user.UserEmail

    <br />
    <button class="btn btn-primary" @onclick="@toggleEdit">Edit my data</button>
}

<p>
    @_user.UserPassword
</p>



<br />
<p><button class="btn btn-primary" @onclick="@DeleteUser">Delete User</button></p>
<br />
<p><button class="btn btn-primary" @onclick="@ChangePassword">Change Password</button></p>
@code{

    bool edit;

    private Users _user = new Users();

    private FrontEndUser _eh = new FrontEndUser();

    string Test = "not tits";

    protected override async Task OnInitializedAsync()
    {
        string email = await sessionStorage.GetItemAsync<string>("emailAddress");
        int id = await userdata.Get_UserID_Email(email);

        var list = await userdata.Get_SingleUser(id);

        _user = list[0];

        if (_user == null)
        {
            Test = "Soggy tits";
        }

        //_user.UserPassword = "123456";
    }

    void DeleteUser()
    {
        //todo
        //popup to confirm delete user
        userdata.RemoveUser(_user);
        Utilities.SendMail(_user.UserEmail, "deregistration", Utilities.GenerateDeRegisterMessage(_user.UserName, _user.UserEmail), true);
        //logout
        ((CustomAuthenticationStateProvider)authenticationService).MarkUserAsLoggedOut();
        navManager.NavigateTo("/");
    }

    void ChangeInfo()
    {
        Test = "Super Tits";
    }

    void ChangePassword()
    {
        Test = "Lazer Tits";
    }

    void toggleEdit()
    {
        edit = !edit;
    }

    void Save()
    {
        toggleEdit();
        userdata.UpdateUser_All(_user);
        //save the shit
    }
}